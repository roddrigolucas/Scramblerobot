import numpy as np
import matplotlib.pyplot as plt
import math

class OccupancyGridMap:
    def __init__(self, width, height, resolution):
        self.width = width
        self.height = height
        self.resolution = resolution
        self.grid = np.zeros((self.width, self.height))  # Initialize grid with zeros

    def update_grid(self, robot_x, robot_y, lidar_readings):
        # Convert robot position to grid coordinates
        robot_grid_x = int(robot_x / self.resolution)
        robot_grid_y = int(robot_y / self.resolution)

        # Update grid based on lidar readings
        for angle_deg, distance_mm in lidar_readings:
            # Convert angle to radians
            angle_rad = math.radians(angle_deg)

            # Calculate end point of the reading
            end_x = robot_x + distance_mm * math.cos(angle_rad)
            end_y = robot_y + distance_mm * math.sin(angle_rad)

            # Convert end point to grid coordinates
            end_grid_x = int(end_x / self.resolution)
            end_grid_y = int(end_y / self.resolution)

            # Bresenham's line algorithm to update cells along the line of sight
            for cell in self.bresenham(robot_grid_x, robot_grid_y, end_grid_x, end_grid_y):
                if 0 <= cell[0] < self.width and 0 <= cell[1] < self.height:
                    self.grid[cell[0], cell[1]] = 1  # Mark cell as occupied

    def bresenham(self, x0, y0, x1, y1):
        # Bresenham's line algorithm
        dx = abs(x1 - x0)
        dy = abs(y1 - y0)
        sx = 1 if x0 < x1 else -1
        sy = 1 if y0 < y1 else -1
        err = dx - dy

        while x0 != x1 or y0 != y1:
            yield (x0, y0)
            e2 = 2 * err
            if e2 > -dy:
                err -= dy
                x0 += sx
            if e2 < dx:
                err += dx
                y0 += sy
        yield (x0, y0)

    def plot_map(self):
        plt.imshow(self.grid, cmap='binary', origin='lower')
        plt.colorbar(label='Occupancy')
        plt.xlabel('X (cells)')
        plt.ylabel('Y (cells)')
        plt.title('Occupancy Grid Map')
        plt.show()

# Example usage:
if __name__ == "__main__":
    # Create occupancy grid map
    grid_map = OccupancyGridMap(width=100, height=100, resolution=0.1)

    # Example robot position
    robot_x = 0.0
    robot_y = 0.0

    # Example lidar readings
    lidar_data = [
    (3.438125, 753.75), (3.468125, 739.25), (349.859375, 729.25), (35.278125, 722.0),
    (3.556875, 716.25), (3.588125, 712.5), (1.703125, 710.75), (4.765625, 711.25),
    (7.640625, 714.25), (10.671875, 719.5), (13.515625, 724.75), (16.546875, 731.5),
    (194.375, 742.25), (224.375, 756.0), (25.375, 772.5), (281.875, 793.75),
    (34.109375, 843.5), (43.109375, 885.5), (6.965625, 353.75), (72.421875, 345.0),
    (7.590625, 337.75), (79.109375, 331.5), (8.190625, 326.5), (8.528125, 322.25),
    (87.875, 318.5), (9.065625, 316.75), (936.875, 315.75), (9.671875, 316.25),
    (99.671875, 318.5), (102.390625, 321.0), (10.559375, 324.0), (10.821875, 328.0),
    (1.111875, 332.75), (114.046875, 338.0), (117.078125, 346.0), (120.109375, 355.5),
    (122.796875, 365.5), (24.540625, 339.5), (248.703125, 330.5), (251.25, 323.25),
    (25.471875, 316.75), (2.574375, 313.0), (260.515625, 310.0), (263.375, 306.25),
    (266.953125, 303.5), (269.359375, 301.25), (2.728125, 299.75), (275.75, 299.25),
    (278.375, 300.0), (281.140625, 301.5), (284.703125, 303.75), (287.625, 307.25),
    (290.078125, 311.5), (2.929375, 316.0), (29.584375, 321.5), (298.578125, 328.0),
    (3.019375, 336.0), (304.75, 345.25), (344.171875, 752.75), (34.721875, 738.5),
    (35.003125, 729.0), (3.531875, 721.5), (356.109375, 716.0), (3.590625, 712.25),
    (215.625, 710.75), (5.0, 711.0), (8.078125, 713.5), (11.015625, 718.75),
    (13.796875, 726.0), (16.734375, 733.5), (19.703125, 743.5), (2.278125, 758.0),
    (256.875, 774.0), (2.859375, 794.25), (34.375, 845.0), (43.390625, 889.0),
    (69.734375, 352.5), (72.796875, 344.0), (764.375, 337.0), (7.946875, 330.75),
    (82.5, 325.75), (85.140625, 321.75), (879.375, 318.25), (915.625, 316.5),
    (94.5, 315.25), (9.728125, 316.75), (99.890625, 319.5), (1.033125, 321.25),
    (10.609375, 324.0), (108.953125, 328.25), (111.734375, 333.0), (11.465625, 338.5),
    (11.715625, 347.0), (12.046875, 356.75), (123.046875, 366.75), (245.421875, 338.25),
    (248.765625, 329.5), (251.515625, 322.5), (255.234375, 316.0), (25.803125, 312.0),
    (26.084375, 309.5), (2.638125, 305.75), (26.690625, 303.25), (270.421875, 300.75),
    (273.375, 299.0), (2.756875, 299.25), (279.125, 300.0), (282.25, 301.5),
    (284.609375, 303.75), (28.771875, 307.5), (290.328125, 311.75), (293.515625, 316.25),
    (296.015625, 321.75), (29.940625, 328.25), (301.828125, 336.75), (30.490625, 346.25),
    (344.484375, 750.75), (347.390625, 738.25), (3.503125, 728.0), (353.453125, 720.5),
    (356.359375, 715.0), (35.940625, 711.5), (23.125, 710.75), (5.390625, 712.25),
    (821.875, 715.75), (113.125, 720.0), (14.171875, 726.75), (170.625, 735.25),
    (1.996875, 745.0), (22.984375, 761.25), (25.984375, 777.5), (28.890625, 795.25),
    (436.875, 894.25), (70.546875, 351.5), (73.390625, 343.25), (76.671875, 336.5),
    (79.671875, 330.5), (823.125, 325.75), (854.375, 321.75), (88.359375, 318.25),
    (91.578125, 316.5), (940.625, 315.25), (9.696875, 316.75), (10.003125, 319.5),
    (10.315625, 321.25), (106.421875, 324.25), (109.265625, 328.5), (111.953125, 333.25),
    (114.625, 339.0), (1.178125, 347.5), (120.25, 357.25), (12.315625, 367.5),
    (24.590625, 337.5), (248.984375, 329.0), (25.228125, 321.75), (255.109375, 315.25),
    (2.579375, 311.5), (26.096875, 309.25), (264.578125, 305.5), (267.546875, 303.0),
    (26.996875, 300.75), (273.125, 299.25), (275.921875, 299.25), (278.828125, 300.0),
    (28.184375, 301.5), (285.078125, 304.0), (2.879375, 307.5), (290.5, 312.0),
    (293.421875, 317.0), (296.25, 322.25), (29.896875, 328.75), (30.221875, 337.25),
    (305.234375, 346.75), (34.459375, 751.75), (347.640625, 739.0), (350.578125, 727.5),
    (353.515625, 720.25), (356.5, 715.0), (359.609375, 711.5), (2.546875, 710.5),
    (546.875, 711.0), (8.515625, 714.5), (11.453125, 720.75), (14.375, 727.5),
    (17.328125, 735.5), (2.021875, 746.75), (23.234375, 762.0), (26.140625, 779.0),
    (29.078125, 798.0), (438.125, 897.75), (7.065625, 351.0), (73.359375, 343.0),
    (76.453125, 336.25), (79.875, 330.25), (82.703125, 325.5), (860.625, 321.25),
    (88.828125, 317.75), (9.146875, 316.25), (94.578125, 315.0), (974.375, 316.75),
    (100.625, 319.75), (103.421875, 321.5), (106.375, 324.5), (1.089375, 329.0),
    (11.215625, 333.75), (11.521875, 339.0), (117.953125, 347.75), (1.206875, 358.0),
    (12.378125, 368.25), (24.590625, 336.5), (24.921875, 328.25), (25.196875, 321.5),
    (255.765625, 314.75), (25.828125, 311.0), (261.703125, 308.75), (264.484375, 305.25),
    (2.671875, 302.5), (270.640625, 300.5), (273.578125, 299.0), (27.628125, 299.0),
    (279.375, 300.0), (282.453125, 301.75), (28.521875, 304.25), (28.840625, 307.75),
    (29.128125, 312.25), (29.415625, 317.0), (296.546875, 322.25), (29.946875, 329.25),
    (302.703125, 337.75), (305.203125, 347.5), (344.875, 749.5), (347.890625, 736.75),
    (350.828125, 727.25), (353.75, 719.25), (356.703125, 713.5), (3.598125, 711.0),
    (2.671875, 710.75), (5.625, 712.75), (8.578125, 716.0), (11.515625, 720.5),
    (14.640625, 727.75), (17.578125, 737.5), (20.5, 748.75), (2.340625, 763.0),
    (264.375, 779.5), (321.875, 825.25), (44.078125, 898.5), (70.609375, 350.75),
    (73.390625, 342.5), (764.375, 335.75), (79.875, 329.75), (82.703125, 325.0),
    (858.125, 321.0), (8.871875, 317.75), (92.109375, 316.25), (94.828125, 315.0),
    (97.515625, 316.5), (100.453125, 319.75), (103.359375, 322.0), (10.640625, 324.75),
    (109.171875, 329.25), (1.126875, 334.0), (11.509375, 339.5), (1.178125, 348.5),
    (120.828125, 358.5), (12.371875, 369.0), (246.640625, 335.75), (24.946875, 327.5),
    (252.609375, 321.0), (2.554375, 314.25), (25.840625, 310.5), (2.620625, 308.25),
    (264.671875, 304.75), (26.778125, 302.25), (2.706875, 300.0), (27.390625, 299.0),
    (27.665625, 299.25), (279.125, 300.25), (28.240625, 302.0), (28.559375, 304.5),
    (28.821875, 308.0), (29.140625, 312.5), (2.940625, 317.5), (296.859375, 323.0),
    (300.015625, 330.0), (302.375, 338.5), (30.521875, 348.25), (34.490625, 749.0),
    (347.859375, 736.25), (35.084375, 727.0), (353.875, 719.75), (356.984375, 714.0),
    (359.921875, 711.25), (2.953125, 711.25), (5.875, 712.75), (89.375, 716.0),
    (1.190625, 721.25), (148.125, 728.25), (17.640625, 737.5), (20.75, 749.25)
]


    # Update grid with lidar readings
    grid_map.update_grid(robot_x, robot_y, lidar_data)

    # Plot occupancy grid map
    grid_map.plot_map()
